" don't read .vimrc when exec vi view ex
if 1

if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/neobundle.vim
 endif

 call neobundle#begin(expand('~/.vim/bundle/'))
 NeoBundleFetch 'Shougo/neobundle.vim'

 NeoBundle 'Shougo/unite.vim'
 NeoBundle 'Shougo/neosnippet'
 NeoBundle 'Shougo/neocomplete.vim'
 NeoBundle 'Shougo/neomru.vim'
 NeoBundle 'Shougo/neosnippet-snippets'
 NeoBundle 'Shougo/vimfiler'
 NeoBundle 'Shougo/neocomplcache'
 NeoBundle 'Shougo/vinarise.vim'
 NeoBundle 'itchyny/lightline.vim'
 NeoBundle 'ornicar/vim-mru'
 NeoBundle 'thinca/vim-quickrun'
 NeoBundle 'violetyk/cake.vim'
 NeoBundle 'violetyk/vim-phpclass'
 NeoBundle 'violetyk/neocomplete-php.vim'
 NeoBundle 'tyru/caw.vim.git'
 NeoBundle 'kana/vim-gf-user'
 NeoBundle 'seventhsense/nerdtree', 'development'
 NeoBundle 'vim-scripts/taglist.vim'
 NeoBundle 'szw/vim-tags'
 NeoBundle 'simeji/winresizer', 'tags'
 NeoBundle 'jpo/vim-railscasts-theme'
 NeoBundle 'jistr/vim-nerdtree-tabs'
 NeoBundle 'rhysd/wandbox-vim'
 NeoBundle 'Shougo/unite-outline'
 NeoBundle 'justmao945/vim-clang'
 NeoBundle 'rhysd/vim-clang-format'
 NeoBundle  'davidhalter/jedi-vim'

NeoBundleLazy 'kana/vim-altr'

NeoBundleLazy 'rhysd/unite-n3337', {
            \ 'depends' : 'Shougo/unite.vim',
            \ 'autoload' : {'filetypes' : 'cpp'}
            \ }

NeoBundleLazy 'vim-jp/cpp-vim', {
            \ 'autoload' : {'filetypes' : 'cpp'}
            \ }

NeoBundleLazy 'Valloric/YouCompleteMe', {
            \ 'build' : {
            \   'mac' : './install.sh --clang-completer',
            \   'unix' : './install.sh --clang-completer',
            \ }
            \ }

NeoBundleLazy 'osyo-manga/vim-stargate', {
            \ 'autoload' : {'filetypes' : 'cpp'}
            \ }

NeoBundleLazy 'rhysd/vim-clang-format', {
             \ 'autoload' : {'filetypes' : ['c', 'cpp', 'objc']}
             \ }

NeoBundleCheck

let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_smart_case = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_manual_completion_start_length = 0
let g:neocomplcache_caching_percent_in_statusline = 1
let g:neocomplcache_enable_skip_completion = 1
let g:neocomplcache_skip_input_time = '0.5'

let g:winresizer_start_key = '<C-n>'
let g:NERDTreeCopyCmd= 'cp -r '

if !exists('g:neocomplcache_force_omni_patterns')
    let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_overwrite_completefunc = 1
let g:neocomplcache_force_omni_patterns.c =
            \ '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.cpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_force_omni_patterns.objc =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_force_omni_patterns.objcpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:clang_complete_auto = 0
let g:clang_auto_select = 0
let g:clang_use_library = 1

let g:clang_format#style_options = {
            \ 'AccessModifierOffset' : -4,
            \ 'AllowShortIfStatementsOnASingleLine' : 'true',
            \ 'AlwaysBreakTemplateDeclarations' : 'true',
            \ 'Standard' : 'C++11',
            \ 'BreakBeforeBraces' : 'Stroustrup',
            \ }

let g:clang_jumpto_declaration_key = '<C-t>'
let g:clang_c_options = '-std=c11'
let g:clang_cpp_options = '-std=c++1z -stdlib=libc++ --pedantic-errors'
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
            \ 'outputter' : 'quickfix',
            \ 'runner' : 'vimproc'
            \ }

let g:quickrun_config.cpp = {
            \ 'command' : 'clang++',
            \ 'cmdopt' : '-std=c++1y -Wall -Wextra',
            \ }

let g:quickrun_config['cpp/gcc'] = {
            \ 'command' : 'g++',
            \ 'cmdopt' : '-std=c++11 -Wall -Wextra',
            \ }

let g:quickrun_config.cpp = {
            \ 'command' : 'clang++',
            \ 'cmdopt' : '-std=c++1y -Wall -Wextra',
            \ 'hook/quickrunex/enable' : 1,
            \ }

call neobundle#end()

noremap <silent><C-m> :MRU<CR>

let NERDTreeWinSize=55
let NERDTreeShowHidden = 1
nnoremap <silent><C-e> :NERDTreeTabsToggle<CR>

filetype plugin indent on
filetype plugin on

:set noswapfile
:set noundofile
:set clipboard=unnamed,autoselect
:set number
:set nowrap
:set guioptions+=b
:set noautoindent
:set nosmartindent

nmap <C-j> <Plug>(caw:i:toggle)
vmap <C-j> <Plug>(caw:i:toggle)

let s:my_snippet = '~/.vim/snippets/'
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory = s:my_snippet

autocmd BufRead *.php\|*.ctp\|*.tpl :set dictionary=~/.vim/dictionaries/php.dict filetype=php
autocmd BufRead *.py :set dictionary=~/.vim/dictionaries/python.dict filetype=python
autocmd BufRead *.rb :set dictionary=~/.vim/dictionaries/ruby.dict filetype=ruby
autocmd BufRead *.pl :set dictionary=~/.vim/dictionaries/perl.dict filetype=perl

autocmd FileType python let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'
autocmd FileType python setl autoindent
autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType python setl expandtab tabstop=4 shiftwidth=4 softtabstop=4

" tagsジャンプの時に複数ある時は一覧表示
nnoremap <C-]> g<C-]>

"タグの設定。
:set tags+=~/.ctags

"タブ、空白、改行の可視化
syntax on
set list
set listchars=tab:>.,trail:_,eol:?,extends:>,precedes:<,nbsp:%
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=reverse ctermfg=DarkMagenta gui=reverse guifg=DarkMagenta
endfunction
if has('syntax')
    augroup ZenkakuSpace
        autocmd!
        autocmd ColorScheme       * call ZenkakuSpace()
        autocmd VimEnter,WinEnter * match ZenkakuSpace /　/
    augroup END
    call ZenkakuSpace()
endif

augroup PHP
	autocmd!
	" 文末の半角スペースを削除
	autocmd BufWritePre *.php\|*.ctp\|*.tpl %s/\s\+$//e
	" PHPLint処理
	autocmd BufWritePost *.php\|*.ctp\|*.tpl call PHPLint()
augroup END
" PHPLint処理
function PHPLint()
	" php -lの実行結果を変数に代入
	let Lint_Result = system( &ft . ' -l ' . bufname(""))
	" No syntax errorsの文字列がmatchするかチェック
	let Match_Result = matchstr(Lint_Result, 'No syntax errors')
	" エラーがあるときだけLintの結果を出力する
	if len(Match_Result) == 0 | echo Lint_Result | endif
endfunction

augroup cpp-namespace
    autocmd!
    autocmd FileType cpp inoremap <buffer><expr>; <SID>expand_namespace()
augroup END

augroup cpp-path
    autocmd!
    autocmd FileType cpp setlocal path=.,/usr/include,/usr/local/include,/usr/lib/c++/v1
augroup END

nnoremap <Leader>a <Plug>(altr-forward)
set cinoptions+=:0,g0

function! CPPCodeCleanup()
  " echo "Cleanup cpp code"
  let l:lines="all"
  let g:clang_format_fallback_style = 'Google'
  :py3f /usr/local/share/clang/clang-format.py
endfunction

command! CPPCodeCleanup call CPPCodeCleanup()

autocmd BufWrite *.{cpp} :CPPCodeCleanup
autocmd BufWrite *.{hpp} :CPPCodeCleanup
autocmd BufWrite *.{c} :CPPCodeCleanup
autocmd BufWrite *.{h} :CPPCodeCleanup

augroup cpp-clangformat
    autocmd!
    autocmd FileType c,cpp,objc noremap <C-K> :py3f /usr/local/share/clang/clang-format.py<CR>
augroup END

" ファイルエンコード定義
:colorscheme railscasts
:set encoding=utf-8
:set fenc=utf-8
:set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8
:set fileformats=unix,dos,mac
:scriptencoding utf-8
:set ambiwidth=double

" バックアップ無効
:set backupskip=/tmp/*,/private/tmp/*
:set backupcopy=yes
:set nobackup

set mouse=a
set ttymouse=xterm2

" CakePHP設定
" let g:cakephp_enable_fix_mode = 1
" let g:cakephp_enable_auto_mode = 1
" let g:cakephp_app = "/var/www/html/xworld/app_front/"
" let g:cakephp_app = "/var/www/html/avabel/app_admin/"

endif
